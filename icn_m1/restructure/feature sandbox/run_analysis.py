import numpy as np
import rereference
import features
import realtime_normalization
import pandas as pd

def run(gen, features, settings, df_M1):
    """Run "real-time" analysis of neurophysiological data generated by "gen".

    Parameters
    ----------
    gen : generator object
        generator that yields segments of data.
    features: 
        Feature_df object (needs to be initialized beforehand)
    settings : dict
        dictionary of settings such as "seglengths" or "frequencyranges"
    df_M1 : data frame
        data frame with the channel configurations and rereferencing settings.

    Returns
    -------
    features (df) : features defined as in settings in shape [M, N] where N is the time index and 
                    M is the total feature number 
    """

    fs_new = int(settings["resampling_rate"])
    normalize_time = int(settings["normalization_settings"]["normalization_time"])

    cnt_samples = 0

    if settings["methods"]["normalization"] is True:
        normalize_samples = int(normalize_time * fs_new)
        feature_arr = pd.Dataframe()
    while True:
        ieeg_batch = next(gen, None)
        if ieeg_batch is None:
            print(f"{str(np.round(cnt_samples/fs_new, 2))} seconds of data processed.")
            return feature_arr

        # call rereference
        if settings["methods"]["re_referencing"] is True:
            ieeg_batch = rereference.rereference(ieeg_batch, df_M1)

        # now normalize raw data 
        if settings["methods"]["normalization"] is True:
            if cnt_samples == 0:
                raw_arr = np.expand_dims(ieeg_batch, axis=0)
            else:
                raw_arr = np.concatenate((raw_arr, np.expand_dims(ieeg_batch, axis=0)), axis=0)
            
            raw_norm = realtime_normalization.realtime_normalization(raw_arr, cnt_samples, normalize_samples, settings)

            # calculate features
            feature_series = features.estimate_features(raw_norm[-1,:]) # last normalized index
        else: 
            feature_series = features.estimate_features(ieeg_batch) # last normalized index
        
        if cnt_samples == 0:
            feature_arr = feature_series
        else:
            feature_arr = feature_arr.append(feature_arr, ignore_index=True)
           
        cnt_samples += 1
